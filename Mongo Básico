// MongoDB Playground
// To disable this template go to Settings | MongoDB | Use Default Template For Playground.
// Make sure you are connected to enable completions and to be able to run a playground.
// Use Ctrl+Space inside a snippet or a string literal to trigger completions.

// Select the database to use.
use('mongodbVSCodePlaygroundDB');

// The drop() command destroys all data from a collection.
// Make sure you run it against the correct database and collection.
db.sales.drop();

// Insert a few documents into the sales collection.
db.sales.insertMany([
  { '_id': 1, 'item': 'abc', 'price': 10, 'quantity': 2, 'date': new Date('2014-03-01T08:00:00Z') },
  { '_id': 2, 'item': 'jkl', 'price': 20, 'quantity': 1, 'date': new Date('2014-03-01T09:00:00Z') },
  { '_id': 3, 'item': 'xyz', 'price': 5, 'quantity': 10, 'date': new Date('2014-03-15T09:00:00Z') },
  { '_id': 4, 'item': 'xyz', 'price': 5, 'quantity':  20, 'date': new Date('2014-04-04T11:21:39.736Z') },
  { '_id': 5, 'item': 'abc', 'price': 10, 'quantity': 10, 'date': new Date('2014-04-04T21:23:13.331Z') },
  { '_id': 6, 'item': 'def', 'price': 7.5, 'quantity': 5, 'date': new Date('2015-06-04T05:08:13Z') },
  { '_id': 7, 'item': 'def', 'price': 7.5, 'quantity': 10, 'date': new Date('2015-09-10T08:43:00Z') },
  { '_id': 8, 'item': 'abc', 'price': 10, 'quantity': 5, 'date': new Date('2016-02-06T20:20:13Z') },
]);

// Run a find command to view items sold on April 4th, 2014.
db.sales.find({ date: { $gte: new Date('2014-04-04'), $lt: new Date('2014-04-05') } });

// Build an aggregation to view total sales for each product in 2014.
const aggregation = [
  { $match: { date: { $gte: new Date('2014-01-01'), $lt: new Date('2015-01-01') } } },
  { $group: { _id: '$item', totalSaleAmount: { $sum: { $multiply: [ '$price', '$quantity' ] } } } }
];

// Run the aggregation and open a cursor to the results.
// Use toArray() to exhaust the cursor to return the whole result set.
// You can use hasNext()/next() to iterate through the cursor page by page.
db.sales.aggregate(aggregation);


db.book.drop();
db.publisher.drop();
db.publisher.insertOne( { publisher: 'DC', CEO: 'Jim Lee'} )
db.publisher.insertOne( { publisher: 'Marvel', CEO: 'Stan Lee'} )
db.book.insertOne( { titleName : 'A Death on the Family', publisher: 'DC'} )
db.book.insertOne( { titleName : 'The Death of Superman', publisher: 'DC'} )
db.book.insertOne( { titleName : 'Crisis on Infinite Earths', publisher: 'DC' } )
db.book.insertOne( { titleName : 'MVC for dummies' ,categories : [ 'Language Programming','Agile']} )
db.book.insertMany( [ { titleName : 'Data Modeling Made Simple' }, { titleName : 'Extreme Scoping' }, { subtitleName : 'UML Database Modeling Workbook' } ] ) 
db.book.insertMany( [{titleName : 'Extreme Scoping',   subtitleName : 'An Agile Approach to Enterprise Data Warehousing and Business Intelligence', pageCount : 300, categories : [ 'Agile', 'Business Intelligence' ] }, { titleName : 'Business unIntelligence', subtitleName : 'Insight and Innovation beyond Analytics and Big Data', pageCount : 442, categories : [ 'Data Warehouse', 'Business Intelligence' ] }, { titleName : 'Secrets of Analytical Leaders', pageCount : 268, categories : [ 'Analytics' ] } ] ) 
db.book.find( {}, { titleName:1, subtitleName:1} )
db.book.find( { titleName : 'Data Modeling for MongoDB' }, { titleName:1, subtitleName:1} )
db.book.find( { pageCount : { $gt : 275 } } )
db.book.find( { pageCount : { $gt : 275 } } ).sort( {titleName : 1 } )
db.book.find( { pageCount : { $gt : 275 } } ).count( )
db.book.find( { $or : [ { pageCount : { $gt : 200 } }, { categories: 'Agile' } ] } )
db.book.find( { categories: 'Agile'})
db.book.find( { categories: {$all:['Agile','Language Programming']}})
db.book.update ( { titleName : 'Crisis on Infinite Earths'}, { $set : { titleName : 'CoIE' } } ) 
db.book.update ( { subtitleName : 'An Agile Approach to Enterprise Data Warehousing and Business Intelligence'}, { 
  $inc: { pageCount: 55 },
  $set : { titleName : 'AAAtEDWaBI' } } ) 
db.book.update ( { categories : 'Agile'}, { $set : {  categories : 'Agile2X' } },   
{ multi: true }) 
db.book.update ( { categories : 'Agile'}, { $set : {  categories : 'Agile3XX' } }, 
  {upsert: true, multi: true }) 
db.book.remove( { titleName : 'CoIE'} )
db.book.aggregate({ $lookup: {from : 'publisher', localField: 'publisher', foreignField: 'publisher', as : 'Best Comics Ever'}})
db.book.aggregate({ $lookup: {from : 'publisher', localField: 'publisher', foreignField: 'publisher', as : 'Best Comics Ever'}},{ $match : { 'Best Comics Ever' : { $ne : []}}}).pretty()
